#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('chatapp:server');
var http = require('http');
var io = require('socket.io');
var fs = require('fs');
var logger = require('../logger');
var ms = require('../onlinemonitoringsystem/ms');
var CircularBuffer = require('circular-buffer');
var querystring = require('querystring');

/**
 * Global variables
 */
var people = {};
var numOfUsers = 0;
var chatBuffer = new CircularBuffer(30);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * SocketIO connection
 */
//Open server socket:
var serverSocket = io(server);
//Connection event fires when a user requests '/' index.ejs
serverSocket.on('connection',function(client){
    /*
    Join_event: The join event is fired when a user enters the chat. The join request updates the users and adds a new user to the people object.
     */
    client.on('join', function(name){
        people[client.id] = name;
        client.emit('update', ' you have connected to the chat.');
        client.broadcast.emit('update', name + ' has joined the chat.');
        serverSocket.emit('update-people',people);
        numOfUsers++;
        logger.log(name + ' entered the chat on: ' + new Date().toLocaleString() + '\n');
    });
    /*
    Number_of_users_event: This event displays the number of active users in the chat.
     */
    client.on('num-users',function(){
        serverSocket.emit('update-num-users',numOfUsers);
    });
    /*
    Send_event: When a client sends a message the 'send' evet is fired. The event broadcasts a message to the other users.
     */
    client.on('send',function(msg){
        postMessage('/',msg);
        client.broadcast.emit('chat',people[client.id],msg);
        client.emit('chat','',msg);
        chatBuffer.push(new Date().toLocaleString() + ' User: ' + people[client.id] + ' - ' + msg);
        console.log(chatBuffer.size());
        for(var i = 0; i < chatBuffer.size(); i++)
            console.log(chatBuffer.toarray()[i]);
        logger.log(people[client.id] + ' said: ' + '"' + msg + '"' + ' on: ' + new Date().toLocaleString() + '\n');
        serverSocket.emit('chat','',ms.injection(ms.analysis(msg)));
    });
    /*
    Report_event: When the report button is clicked a 'report' event is fired. This injects the automatic injection into the chat.
     */
    client.on('report',function(){
        serverSocket.emit('chat','',ms.injection(6));

    });
    /*
    Disconnect event: This event is fired when a users leaves the chat. The users is removed from the people object and number of users is decremented.
    A message is then broadcast to all other active users notifying them that the current user has left the chat.
    */
    client.on('disconnect',function(){
        if(numOfUsers > 0 && people[client.id] != undefined) {
            logger.log(people[client.id] + ' left the chat at ' + new Date().toLocaleTimeString() + ' on ' + new Date().toLocaleDateString() + '.\n');
            client.broadcast.emit('update', people[client.id] + ' has left the chat.');
            delete people[client.id];
            numOfUsers--;
            serverSocket.emit('update-people', people);
            serverSocket.emit('update-num-users', numOfUsers);
            if(numOfUsers == 0){
                logger.log('\nEnd of Chat\n------------------------------------------------------\n');
            }
        }
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
Handle http message post
 */

function postMessage(path,msg){

    var data = querystring.stringify({
        message: msg
    });
    var options = {
        host: 'localhost',
        port: 4000,
        path: path,
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(data)
        }
    };

    var req = http.request(options, function(res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log("body: " + chunk);
        });
    });

    req.write(data);
    req.end();
}